// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lambda_entropy
double lambda_entropy(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_entropy(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(lambda_entropy(v_tau, a, b));
    return __result;
END_RCPP
}
// lambda_demp
double lambda_demp(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_demp(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(lambda_demp(v_tau, a, b));
    return __result;
END_RCPP
}
// lambda_dempMod
double lambda_dempMod(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_dempMod(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(lambda_dempMod(v_tau, a, b));
    return __result;
END_RCPP
}
// lambda_coda
double lambda_coda(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_coda(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(lambda_coda(v_tau, a, b));
    return __result;
END_RCPP
}
// lambda_codaNorm
double lambda_codaNorm(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_codaNorm(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(lambda_codaNorm(v_tau, a, b));
    return __result;
END_RCPP
}
// lambda_prop
double lambda_prop(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_prop(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(lambda_prop(v_tau, a, b));
    return __result;
END_RCPP
}
// omega_const
double omega_const(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_omega_const(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(omega_const(v_tau, a, b));
    return __result;
END_RCPP
}
// omega_prop
double omega_prop(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_omega_prop(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(omega_prop(v_tau, a, b));
    return __result;
END_RCPP
}
// omega_dich
double omega_dich(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_omega_dich(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(omega_dich(v_tau, a, b));
    return __result;
END_RCPP
}
// mergeComponents
NumericMatrix mergeComponents(NumericMatrix post, int a, int b);
RcppExport SEXP mixpack_mergeComponents(SEXP postSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(mergeComponents(post, a, b));
    return __result;
END_RCPP
}
// mergeStep_prop_codaNorm
List mergeStep_prop_codaNorm(NumericMatrix post);
RcppExport SEXP mixpack_mergeStep_prop_codaNorm(SEXP postSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    __result = Rcpp::wrap(mergeStep_prop_codaNorm(post));
    return __result;
END_RCPP
}
// mergeStep_const_entropy
List mergeStep_const_entropy(NumericMatrix post);
RcppExport SEXP mixpack_mergeStep_const_entropy(SEXP postSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    __result = Rcpp::wrap(mergeStep_const_entropy(post));
    return __result;
END_RCPP
}
// confusion_prop_codaNorm
double confusion_prop_codaNorm(NumericMatrix post, int a, int b);
RcppExport SEXP mixpack_confusion_prop_codaNorm(SEXP postSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(confusion_prop_codaNorm(post, a, b));
    return __result;
END_RCPP
}
// confusion_const_entropy
double confusion_const_entropy(NumericMatrix post, int a, int b);
RcppExport SEXP mixpack_confusion_const_entropy(SEXP postSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(confusion_const_entropy(post, a, b));
    return __result;
END_RCPP
}
// confusion_prop_demp
double confusion_prop_demp(NumericMatrix post, int a, int b);
RcppExport SEXP mixpack_confusion_prop_demp(SEXP postSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(confusion_prop_demp(post, a, b));
    return __result;
END_RCPP
}
