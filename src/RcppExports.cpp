// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// lambda_entropy
double lambda_entropy(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_entropy(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_entropy(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// lambda_demp
double lambda_demp(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_demp(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_demp(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// lambda_dempMod
double lambda_dempMod(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_dempMod(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_dempMod(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// lambda_coda
double lambda_coda(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_coda(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_coda(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// lambda_codaNorm
double lambda_codaNorm(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_codaNorm(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_codaNorm(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// lambda_prop
double lambda_prop(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_lambda_prop(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_prop(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// omega_const
double omega_const(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_omega_const(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(omega_const(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// omega_prop
double omega_prop(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_omega_prop(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(omega_prop(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// omega_dich
double omega_dich(NumericVector v_tau, int a, int b);
RcppExport SEXP mixpack_omega_dich(SEXP v_tauSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(omega_dich(v_tau, a, b));
    return rcpp_result_gen;
END_RCPP
}
// mergeComponents
NumericMatrix mergeComponents(NumericMatrix post, int a, int b);
RcppExport SEXP mixpack_mergeComponents(SEXP postSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mergeComponents(post, a, b));
    return rcpp_result_gen;
END_RCPP
}
// mergeComponents_mult
NumericMatrix mergeComponents_mult(NumericMatrix post, int a, int b);
RcppExport SEXP mixpack_mergeComponents_mult(SEXP postSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mergeComponents_mult(post, a, b));
    return rcpp_result_gen;
END_RCPP
}
// merge_step_cpp
arma::mat merge_step_cpp(NumericMatrix post, String omega, String lambda);
RcppExport SEXP mixpack_merge_step_cpp(SEXP postSEXP, SEXP omegaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< String >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< String >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_step_cpp(post, omega, lambda));
    return rcpp_result_gen;
END_RCPP
}
// get_hierarchical_partition_cpp
List get_hierarchical_partition_cpp(NumericMatrix post, String omega, String lambda);
RcppExport SEXP mixpack_get_hierarchical_partition_cpp(SEXP postSEXP, SEXP omegaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< String >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< String >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_hierarchical_partition_cpp(post, omega, lambda));
    return rcpp_result_gen;
END_RCPP
}
// get_hierarchical_partition_mult_fast
List get_hierarchical_partition_mult_fast(NumericMatrix post, String omega, String lambda);
RcppExport SEXP mixpack_get_hierarchical_partition_mult_fast(SEXP postSEXP, SEXP omegaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< String >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< String >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_hierarchical_partition_mult_fast(post, omega, lambda));
    return rcpp_result_gen;
END_RCPP
}
